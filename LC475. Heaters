// method 1, two sorts:

class Solution {
    public int findRadius(int[] houses, int[] heaters) {
        Arrays.sort(heaters);
        Arrays.sort(houses);
        int i = 0, res = 0;
        for(int house : houses) {
            while(i < heaters.length-1 &&
            Math.abs(heaters[i+1]-house) <= Math.abs(heaters[i]-house)) {
                i++;
            }
            res = Math.max(res, Math.abs(heaters[i]-house));
        }
        return res;
    }
}

// O(nlogn), O(1)


// method 2: binary search:

public class Solution {
    public int findRadius(int[] houses, int[] heaters) {
        Arrays.sort(heaters);
        int maxDistance = 0;
        for (int i = 0; i < houses.length; i++) {
            int nearestDistance = getNearestDistance(houses[i], heaters);
            if (nearestDistance > maxDistance) maxDistance = nearestDistance;
        }
        return maxDistance;
    }

    public int getNearestDistance(int pos, int[] heaters) {
        int lo = 0, hi = heaters.length - 1;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if (heaters[mid] == pos) return 0;
            else if (pos < heaters[mid]) hi = mid - 1;
            else lo = mid + 1;
        }
        if (lo == 0) return heaters[0] - pos;
        else if (lo == heaters.length) return pos - heaters[heaters.length - 1];
        else return Math.min(pos - heaters[lo - 1] , heaters[lo] - pos);
    }
}

// O(nlogn), O(1)

// method 3: TreeSet:

class Solution {
   public int findRadius(int[] houses, int[] heaters) {
        TreeSet<Integer> treeSet = new TreeSet<>();
        for (int heater : heaters) {
            treeSet.add(heater);
        }
        int result = 0;
        for (int house : houses) {
            Integer floor = treeSet.floor(house);
            Integer ceiling = treeSet.ceiling(house);
            /*floor and ceiling cannot be null at the same time*/
            if (floor == null) {
                result = Math.max(result, ceiling - house);
            } else if (ceiling == null) {
                result = Math.max(result, house - floor);
            } else {
                result = Math.max(result, Math.min(house - floor, ceiling - house));
            }
        }
        return result;
    }
}

//O(nlogn), O(1)
