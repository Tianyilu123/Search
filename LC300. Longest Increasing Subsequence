// method 1: insertion sort + binary search:

class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums == null || nums.length == 0) return 0;
        int len = 0;
        int[] dp = new int[nums.length];
        for(int num : nums) {
            int start = 0, end = len-1;
            while(start <= end) {
                int mid = (end - start)/2 + start;
                if(dp[mid] < num)
                    start = mid + 1;
                else 
                    end = mid - 1;
            }
            dp[start] = num;
            if(start == len)
                len++;
        }
        return len;
    }
}

//O(nlogn), O(n)


// method 2: DP:

class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums == null || nums.length == 0)
            return 0;
        int[] dp = new int[nums.length];
        Arrays.fill(dp, 1);
        for(int i = 1; i<nums.length; i++) {
            for(int j = 0; j<i; j++) {
                if(nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        
        int res = dp[0];
        for(int i=0; i<dp.length; i++) {
            res = Math.max(res, dp[i]);
        }
        return res;
    }
}

// O(n^2), O(n);
